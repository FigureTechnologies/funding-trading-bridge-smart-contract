searchState.loadedDescShard("funding_trading_bridge_smart_contract", 0, "Funding Trading Bridge Smart Contract\nThe entrypoint for all external commands sent to the …\nAll code and functions pertaining to the execute …\nAll code and functions pertaining to the instantiate …\nAll code and functions pertaining to the migrate …\nAll code and functions pertaining to the query entrypoint. …\nAll code and functions pertaining to interacting with …\nAll globally-defined structs used by functions throughout …\nUtility functions and traits adopted by various aspects of …\nThe entry point used when an account initiates an …\nThe entry point used when an account instantiates a stored …\nThe entry point used when the contract admin migrates an …\nThe entry point used when an account invokes the contract …\nThis execution route allows the contract admin to choose a …\nThis execution route allows the contract admin to choose …\nThis execution route allows the contract admin to choose …\nThis execution route converts the deposit marker denom to …\nThis execution route converts the trading marker denom to …\nInvoked via the contract’s execute functionality.  This …\nInvoked via the contract’s execute functionality.  This …\nInvoked via the contract’s execute functionality.  This …\nInvoked via the contract’s execute functionality.  The …\nInvoked via the contract’s execute functionality.  The …\nThe main functionality executed when the smart contract is …\nThe core functionality that runs when the contract is …\nThe main entrypoint function for running a code migration.\nThe main entrypoint function for running a code migration. …\nA query that fetches the stored values in the contract …\nFetches the current values within the contract state.\nContains the functionality for interacting with the …\nStores the core contract configurations created on …\nThe bech32 address of the account that has admin rights …\nA free-form name defining this particular contract …\nThe crate name, used to ensure that newly-migrated …\nThe crate version, used to ensure that newly-migrated …\nDefines the marker denom that is deposited to this …\nReturns the argument unchanged.\nFetches the current contract instance of contract state.  …\nCalls <code>U::from(self)</code>.\nConstructs a new instance of this struct.\nDefines any blockchain attributes required on accounts in …\nDefines any blockchain attributes required on accounts in …\nOverwrites the existing singleton contract storage …\nDefines the marker denom that is sent to accounts from …\nDefines a blockchain denom associated with a marker in …\nDefines all errors emitted by the contract.\nDefines all msg payloads sent to the contract.\nDefines a blockchain denom associated with a marker in …\nDefines a conversion between one denom and another.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the marker on-chain that manages this denom.\nConstructs a new instance of this struct.\nThe amount of decimal places represented in coin by this …\nAny amount of the source amount that cannot be converted to\nThe amount of the first denom used in the conversion.\nThe amount of the second denom to which the first denom is …\nThe base error enum that is used to wrap any errors that …\nAn error that occurs when a conversion between two …\nAn error that occurs when a blockchain account contains …\nAn error that occurs when an invalid text format is …\nAn error that occurs when invalid funds are sent to the …\nAn error that occurs when a migration fails.\nAn error that occurs when the executing sender is not …\nAn error that occurs when a target resource cannot be …\nA wrapper for a core library integer parsing error.\nA wrapper for a semver library error.\nA wrapper for a a core library std error.\nAn error that occurs when smart contract storage fails.\nAn error that occurs when type validation fails.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA free-form message describing the nature of the error.\nA route that swaps the current value in the contract state …\nA route that sets a new collection of attribute names …\nA route that sets a new collection of attribute names …\nThe standard migration route that modifies the contract …\nAll defined paylods to be used when executing routes on …\nA route that will attempt to pull the trade amount of the …\nThe msg that is sent to the chain in order to instantiate …\nAll defined payloads to be used when migrating to a new …\nA route that returns the current contract state value …\nAll defined payloads to be used when querying routes on …\nA route that will attempt to pull the trade amount of the …\nA free-form name defining this particular contract …\nDefines the marker denom that is deposited to this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf provided, this value must be a valid provenance name …\nDefines any blockchain attributes required on accounts in …\nDefines any blockchain attributes required on accounts in …\nDefines the marker denom that is sent to accounts from …\nThe new attributes that will be set in the contract state…\nThe new attributes that will be set in the contract state…\nA bech32 address to use as the new administrator of the …\nThe amount of the deposit marker to pull from the sender’…\nThe amount of the trading marker to pull from the sender’…\nUtility functions for converting denominations to other …\nUtility functions for interacting with Provenance …\nA trait for describing functions on various structs to …\nUtility functions for validating requests.\nConverts the source denom amount to the target denom’s …\nEnsures that the target account has all the specified …\nEnsures that the target account holds enough of the target …\nFetches the bech32 address associated with the marker …\nGenerates a name bind msg that will properly assign the …\nA trait that defines a struct that validates its own …\nValidates all fields by self-reference, where necessary.\nVerifies that the funds sent into the message info are …\nVerifies that the provided string is a valid attribute …")