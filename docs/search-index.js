var searchIndex = JSON.parse('{\
"funding_trading_bridge_smart_contract":{"doc":"Funding Trading Bridge Smart Contract","t":"AAAAAAAAFFFFAAAAAFFFFFAFAFAFARRDLMLLLLLMMMMLLLLLFLLLMMLLLFLMLLLAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLMMLLLLLLLLENNNNNNNNNNNNLLLLLLLLLLLLLLLMMMMMMMMMNNNNENDENENLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMMMMAAAAFFFFFIKF","n":["contract","execute","instantiate","migrate","query","store","types","util","execute","instantiate","migrate","query","admin_update_admin","admin_update_deposit_required_attributes","admin_update_withdraw_required_attributes","fund_trading","withdraw_trading","admin_update_admin","admin_update_deposit_required_attributes","admin_update_withdraw_required_attributes","fund_trading","withdraw_trading","instantiate_contract","instantiate_contract","migrate_contract","migrate_contract","query_contract_state","query_contract_state","contract_state","CONTRACT_TYPE","CONTRACT_VERSION","ContractStateV1","__clone_box","admin","as_","borrow","borrow_mut","clone","clone_into","contract_name","contract_type","contract_version","deposit_marker","deserialize","eq","equivalent","fmt","from","get_contract_state_v1","into","json_schema","new","required_deposit_attributes","required_withdraw_attributes","schema_id","schema_name","serialize","set_contract_state_v1","to_owned","trading_marker","try_from","try_into","type_id","denom","error","msg","Denom","DenomConversion","__clone_box","__clone_box","as_","as_","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","eq","equivalent","equivalent","fmt","fmt","from","from","into","into","json_schema","json_schema","name","new","precision","remainder","schema_id","schema_id","schema_name","schema_name","self_validate","serialize","serialize","source_amount","target_amount","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ContractError","ConversionError","InvalidAccountError","InvalidFormatError","InvalidFundsError","MigrationError","NotAuthorizedError","NotFoundError","ParseIntError","SemVerError","Std","StorageError","ValidationError","as_","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","source","to_string","try_from","try_into","type_id","message","message","message","message","message","message","message","message","message","AdminUpdateAdmin","AdminUpdateDepositRequiredAttributes","AdminUpdateWithdrawRequiredAttributes","ContractUpgrade","ExecuteMsg","FundTrading","InstantiateMsg","MigrateMsg","QueryContractState","QueryMsg","WithdrawTrading","__clone_box","__clone_box","__clone_box","__clone_box","as_","as_","as_","as_","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contract_name","deposit_marker","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","json_schema","json_schema","json_schema","json_schema","name_to_bind","required_deposit_attributes","required_withdraw_attributes","schema_id","schema_id","schema_id","schema_id","schema_name","schema_name","schema_name","schema_name","self_validate","self_validate","self_validate","self_validate","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","trading_marker","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","attributes","attributes","new_admin_address","trade_amount","trade_amount","conversion_utils","provenance_utils","self_validating","validation_utils","convert_denom","check_account_has_all_attributes","check_account_has_enough_denom","get_marker_address_for_denom","msg_bind_name","SelfValidating","self_validate","check_funds_are_empty"],"q":[[0,"funding_trading_bridge_smart_contract"],[8,"funding_trading_bridge_smart_contract::contract"],[12,"funding_trading_bridge_smart_contract::execute"],[17,"funding_trading_bridge_smart_contract::execute::admin_update_admin"],[18,"funding_trading_bridge_smart_contract::execute::admin_update_deposit_required_attributes"],[19,"funding_trading_bridge_smart_contract::execute::admin_update_withdraw_required_attributes"],[20,"funding_trading_bridge_smart_contract::execute::fund_trading"],[21,"funding_trading_bridge_smart_contract::execute::withdraw_trading"],[22,"funding_trading_bridge_smart_contract::instantiate"],[23,"funding_trading_bridge_smart_contract::instantiate::instantiate_contract"],[24,"funding_trading_bridge_smart_contract::migrate"],[25,"funding_trading_bridge_smart_contract::migrate::migrate_contract"],[26,"funding_trading_bridge_smart_contract::query"],[27,"funding_trading_bridge_smart_contract::query::query_contract_state"],[28,"funding_trading_bridge_smart_contract::store"],[29,"funding_trading_bridge_smart_contract::store::contract_state"],[63,"funding_trading_bridge_smart_contract::types"],[66,"funding_trading_bridge_smart_contract::types::denom"],[115,"funding_trading_bridge_smart_contract::types::error"],[143,"funding_trading_bridge_smart_contract::types::error::ContractError"],[152,"funding_trading_bridge_smart_contract::types::msg"],[253,"funding_trading_bridge_smart_contract::types::msg::ExecuteMsg"],[258,"funding_trading_bridge_smart_contract::util"],[262,"funding_trading_bridge_smart_contract::util::conversion_utils"],[263,"funding_trading_bridge_smart_contract::util::provenance_utils"],[267,"funding_trading_bridge_smart_contract::util::self_validating"],[269,"funding_trading_bridge_smart_contract::util::validation_utils"],[270,"cosmwasm_std::deps"],[271,"cosmwasm_std::types"],[272,"cosmwasm_std::types"],[273,"core::result"],[274,"cosmwasm_std::deps"],[275,"alloc::string"],[276,"alloc::vec"],[277,"dyn_clone::sealed"],[278,"bnum::cast"],[279,"serde::de"],[280,"core::fmt"],[281,"core::fmt"],[282,"schemars::gen"],[283,"schemars::schema"],[284,"cosmwasm_std::addresses"],[285,"core::convert"],[286,"alloc::borrow"],[287,"serde::ser"],[288,"core::any"],[289,"core::num::error"],[290,"semver::parse"],[291,"cosmwasm_std::errors::std_error"],[292,"core::error"],[293,"core::option"],[294,"provwasm_std::types::provenance::name::v1"]],"d":["The entrypoint for all external commands sent to the …","All code and functions pertaining to the execute …","All code and functions pertaining to the instantiate …","All code and functions pertaining to the migrate …","All code and functions pertaining to the query entrypoint. …","All code and functions pertaining to interacting with …","All globally-defined structs used by functions throughout …","Utility functions and traits adopted by various aspects of …","The entry point used when an account initiates an …","The entry point used when an account instantiates a stored …","The entry point used when the contract admin migrates an …","The entry point used when an account invokes the contract …","This execution route allows the contract admin to choose a …","This execution route allows the contract admin to choose …","This execution route allows the contract admin to choose …","This execution route converts the deposit marker denom to …","This execution route converts the trading marker denom to …","Invoked via the contract’s execute functionality.  This …","Invoked via the contract’s execute functionality.  This …","Invoked via the contract’s execute functionality.  This …","Invoked via the contract’s execute functionality.  The …","Invoked via the contract’s execute functionality.  The …","The main functionality executed when the smart contract is …","The core functionality that runs when the contract is …","The main entrypoint function for running a code migration.","The main entrypoint function for running a code migration. …","A query that fetches the stored values in the contract …","Fetches the current values within the contract state.","Contains the functionality for interacting with the …","","","Stores the core contract configurations created on …","","The bech32 address of the account that has admin rights …","","","","","","A free-form name defining this particular contract …","The crate name, used to ensure that newly-migrated …","The crate version, used to ensure that newly-migrated …","Defines the marker denom that is deposited to this …","","","","","Returns the argument unchanged.","Fetches the current contract instance of contract state.  …","Calls <code>U::from(self)</code>.","","Constructs a new instance of this struct.","Defines any blockchain attributes required on accounts in …","Defines any blockchain attributes required on accounts in …","","","","Overwrites the existing singleton contract storage …","","Defines the marker denom that is sent to accounts from …","","","","Defines a blockchain denom associated with a marker in …","Defines all errors emitted by the contract.","Defines all msg payloads sent to the contract.","Defines a blockchain denom associated with a marker in …","Defines a conversion between one denom and another.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The name of the marker on-chain that manages this denom.","Constructs a new instance of this struct.","The amount of decimal places represented in coin by this …","Any amount of the source amount that cannot be converted to","","","","","","","","The amount of the first denom used in the conversion.","The amount of the second denom to which the first denom is …","","","","","","","","","The base error enum that is used to wrap any errors that …","An error that occurs when a conversion between two …","An error that occurs when a blockchain account contains …","An error that occurs when an invalid text format is …","An error that occurs when invalid funds are sent to the …","An error that occurs when a migration fails.","An error that occurs when the executing sender is not …","An error that occurs when a target resource cannot be …","A wrapper for a core library integer parsing error.","A wrapper for a semver library error.","A wrapper for a a core library std error.","An error that occurs when smart contract storage fails.","An error that occurs when type validation fails.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","A free-form message describing the nature of the error.","A free-form message describing the nature of the error.","A free-form message describing the nature of the error.","A free-form message describing the nature of the error.","A free-form message describing the nature of the error.","A free-form message describing the nature of the error.","A free-form message describing the nature of the error.","A free-form message describing the nature of the error.","A free-form message describing the nature of the error.","A route that swaps the current value in the contract state …","A route that sets a new collection of attribute names …","A route that sets a new collection of attribute names …","The standard migration route that modifies the contract …","All defined paylods to be used when executing routes on …","A route that will attempt to pull the trade amount of the …","The msg that is sent to the chain in order to instantiate …","All defined payloads to be used when migrating to a new …","A route that returns the current contract state value …","All defined payloads to be used when querying routes on …","A route that will attempt to pull the trade amount of the …","","","","","","","","","","","","","","","","","","","","","","","","","A free-form name defining this particular contract …","Defines the marker denom that is deposited to this …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","If provided, this value must be a valid provenance name …","Defines any blockchain attributes required on accounts in …","Defines any blockchain attributes required on accounts in …","","","","","","","","","","","","","","","","","","","","","Defines the marker denom that is sent to accounts from …","","","","","","","","","","","","","The new attributes that will be set in the contract state…","The new attributes that will be set in the contract state…","A bech32 address to use as the new administrator of the …","The amount of the deposit marker to pull from the sender’…","The amount of the trading marker to pull from the sender’…","Utility functions for converting denominations to other …","Utility functions for interacting with Provenance …","A trait for describing functions on various structs to …","Utility functions for validating requests.","Converts the source denom amount to the target denom’s …","Ensures that the target account has all the specified …","Ensures that the target account holds enough of the target …","Fetches the bech32 address associated with the marker …","Generates a name bind msg that will properly assign the …","A trait that defines a struct that validates its own …","Validates all fields by self-reference, where necessary.","Verifies that the funds sent into the message info are …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,19,19,19,19,19,19,19,19,0,19,19,19,19,19,0,0,0,0,0,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,28,28,35,28,35,28,35,28,28,35,35,35,28,35,28,35,28,35,28,35,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,43,44,45,46,47,48,49,50,51,4,4,4,9,0,4,0,0,11,0,4,8,4,11,9,8,4,11,9,8,4,11,9,8,4,11,9,8,4,11,9,8,4,11,9,8,8,8,4,11,9,8,4,11,9,8,4,11,9,8,4,11,9,8,4,11,9,8,4,11,9,8,4,11,9,8,8,8,8,4,11,9,8,4,11,9,8,4,11,9,8,4,11,9,8,4,11,9,8,8,4,11,9,8,4,11,9,8,4,11,9,52,53,54,55,56,0,0,0,0,0,0,0,0,0,0,57,0],"f":[0,0,0,0,0,0,0,0,[[1,2,3,4],[[7,[5,6]]]],[[1,2,3,8],[[7,[5,6]]]],[[1,2,9],[[7,[5,6]]]],[[10,2,11],[[7,[12,6]]]],0,0,0,0,0,[[1,2,3,13],[[7,[5,6]]]],[[1,2,3,[14,[13]]],[[7,[5,6]]]],[[1,2,3,[14,[13]]],[[7,[5,6]]]],[[1,2,3,15],[[7,[5,6]]]],[[1,2,3,15],[[7,[5,6]]]],0,[[1,2,3,8],[[7,[5,6]]]],0,[1,[[7,[5,6]]]],0,[10,[[7,[12,6]]]],0,0,0,0,[[-1,16],17,[]],0,[-1,-3,[],[],[[18,[-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[[-1,-2],17,[],[]],0,0,0,0,[-1,[[7,[19]]],20],[[19,19],21],[[-1,-2],21,[],[]],[[19,22],23],[-1,-1,[]],[24,[[7,[19,6]]]],[-1,-2,[],[]],[25,26],[[27,-1,28,28,[29,[13]],[29,[13]]],19,[[30,[13]]]],0,0,[[],[[32,[31]]]],[[],13],[[19,-1],7,33],[[24,19],[[7,[17,6]]]],[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,34,[]],0,0,0,0,0,[[-1,16],17,[]],[[-1,16],17,[]],[-1,-3,[],[],[[18,[-2]]]],[-1,-3,[],[],[[18,[-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[35,35],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[-1,[[7,[28]]],20],[-1,[[7,[35]]],20],[[28,28],21],[[35,35],21],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[28,22],23],[[35,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,26],[25,26],0,[[-1,36],28,[[30,[13]]]],0,0,[[],[[32,[31]]]],[[],[[32,[31]]]],[[],13],[[],13],[28,[[7,[17,6]]]],[[28,-1],7,33],[[35,-1],7,33],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-3,[],[],[[18,[-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[6,22],23],[[6,22],23],[37,6],[38,6],[-1,-1,[]],[39,6],[-1,-2,[],[]],[6,[[41,[40]]]],[-1,13,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,16],17,[]],[[-1,16],17,[]],[[-1,16],17,[]],[[-1,16],17,[]],[-1,-3,[],[],[[18,[-2]]]],[-1,-3,[],[],[[18,[-2]]]],[-1,-3,[],[],[[18,[-2]]]],[-1,-3,[],[],[[18,[-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,8],[4,4],[11,11],[9,9],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],0,0,[-1,[[7,[8]]],20],[-1,[[7,[4]]],20],[-1,[[7,[11]]],20],[-1,[[7,[9]]],20],[[8,8],21],[[4,4],21],[[11,11],21],[[9,9],21],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[8,22],23],[[4,22],23],[[11,22],23],[[9,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,26],[25,26],[25,26],[25,26],0,0,0,[[],[[32,[31]]]],[[],[[32,[31]]]],[[],[[32,[31]]]],[[],[[32,[31]]]],[[],13],[[],13],[[],13],[[],13],[8,[[7,[17,6]]]],[4,[[7,[17,6]]]],[11,[[7,[17,6]]]],[9,[[7,[17,6]]]],[[8,-1],7,33],[[4,-1],7,33],[[11,-1],7,33],[[9,-1],7,33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,[[15,28,28],[[7,[35,6]]]],[[1,-1,[29,[13]]],[[7,[17,6]]],[[30,[13]]]],[[10,-1,-2,15],[[7,[17,6]]],[[30,[13]]],[[30,[13]]]],[[10,-1],[[7,[13,6]]],[[30,[13]]]],[[-1,-2,21],[[7,[42,6]]],[[30,[13]]],[[30,[13]]]],0,[-1,[[7,[17,6]]],[]],[3,[[7,[17,6]]]]],"c":[],"p":[[3,"DepsMut",270],[3,"Env",271],[3,"MessageInfo",271],[4,"ExecuteMsg",152],[3,"Response",272],[4,"ContractError",115],[4,"Result",273],[3,"InstantiateMsg",152],[4,"MigrateMsg",152],[3,"Deps",270],[4,"QueryMsg",152],[3,"Binary",274],[3,"String",275],[3,"Vec",276],[15,"u128"],[3,"Private",277],[15,"tuple"],[8,"CastFrom",278],[3,"ContractStateV1",29],[8,"Deserializer",279],[15,"bool"],[3,"Formatter",280],[6,"Result",280],[8,"Storage",281],[3,"SchemaGenerator",282],[4,"Schema",283],[3,"Addr",284],[3,"Denom",66],[15,"slice"],[8,"Into",285],[15,"str"],[4,"Cow",286],[8,"Serializer",287],[3,"TypeId",288],[3,"DenomConversion",66],[15,"u64"],[3,"ParseIntError",289],[3,"Error",290],[4,"StdError",291],[8,"Error",292],[4,"Option",293],[3,"MsgBindNameRequest",294],[13,"ConversionError",143],[13,"InvalidAccountError",143],[13,"InvalidFormatError",143],[13,"InvalidFundsError",143],[13,"MigrationError",143],[13,"NotAuthorizedError",143],[13,"NotFoundError",143],[13,"StorageError",143],[13,"ValidationError",143],[13,"AdminUpdateDepositRequiredAttributes",253],[13,"AdminUpdateWithdrawRequiredAttributes",253],[13,"AdminUpdateAdmin",253],[13,"FundTrading",253],[13,"WithdrawTrading",253],[8,"SelfValidating",267]],"b":[[131,"impl-Display-for-ContractError"],[132,"impl-Debug-for-ContractError"],[133,"impl-From%3CParseIntError%3E-for-ContractError"],[134,"impl-From%3CError%3E-for-ContractError"],[136,"impl-From%3CStdError%3E-for-ContractError"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
