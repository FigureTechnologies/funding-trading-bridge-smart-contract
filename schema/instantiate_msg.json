{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "contract_name",
    "deposit_marker",
    "required_deposit_attributes",
    "required_withdraw_attributes",
    "trading_marker"
  ],
  "properties": {
    "contract_name": {
      "type": "string"
    },
    "deposit_marker": {
      "$ref": "#/definitions/Denom"
    },
    "required_deposit_attributes": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "required_withdraw_attributes": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "trading_marker": {
      "$ref": "#/definitions/Denom"
    }
  },
  "definitions": {
    "Denom": {
      "type": "object",
      "required": [
        "name",
        "precision"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "precision": {
          "$ref": "#/definitions/Uint64"
        }
      }
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
